{"version":3,"file":"sw.bundle.js","mappings":";mBAQA,QAHc,gQCJd,ovNAuCA,QAtCoB,CACZA,UAAS,WAAG,0HACTC,OAAOC,KAAKC,IAAkB,0CADrB,EAElB,EACMC,wBAAuB,SAACC,GAAS,4HACjB,EAAKL,YAAW,OAAtB,EAAH,KACLM,OAAOD,GAAS,0CAFe,EAGvC,EACME,eAAc,WAAG,iHACIN,OAAOO,OAAM,OAAnB,EAAH,KAELC,QAAO,SAACC,GAAI,OAAKA,IAASP,CAAiB,IAAEQ,KAAI,SAACC,GAAY,OAAKX,OAAM,OAAQW,EAAa,IAAE,0CAHtF,EAIvB,EACMC,aAAY,SAACR,GAAS,kIACHS,MAAMT,GAAQ,OAAvB,IAARU,EAAW,EAAH,OAEuB,MAApBA,EAASC,OAAc,yCAC/BD,GAAQ,uBAGX,EAAKE,YAAYZ,GAAQ,gCACxBU,GAAQ,0CARW,EAS5B,EACME,YAAW,SAACZ,GAAS,4HACL,EAAKL,YAAW,OAAtB,EAAH,KACLkB,IAAIb,GAAS,0CAFM,EAG3B,EACMc,gBAAe,SAACd,GAAS,kIACNJ,OAAOmB,MAAMf,GAAQ,OAA9B,KAARU,EAAW,EAAH,MAEA,CAAF,eACiB,OAA3B,EAAKF,aAAaR,GAAS,kBACpBU,GAAQ,gCAEV,EAAKF,aAAaR,IAAQ,0CAPJ,EAQ/B,GCnCF,IAAMgB,EAAgB,CAAC,KAAM,eAAgB,oBAAqB,0BAGlEC,KAAKC,iBAAiB,WAAW,SAACC,GAChCA,EAAEC,UAAUC,EAAAA,wBAAoC,GAAD,OAAKL,IACtD,IAEAC,KAAKC,iBAAiB,YAAY,SAACC,GACjCA,EAAEC,UAAUC,EAAAA,iBACd,IAEAJ,KAAKC,iBAAiB,SAAS,SAACC,GAC9BA,EAAEG,YAAYD,EAAAA,gBAA4BF,EAAEnB,SAC9C","sources":["webpack://restaurant-apps/./src/scripts/global/config.js","webpack://restaurant-apps/./src/scripts/utils/cacheHelper.js","webpack://restaurant-apps/./src/scripts/sw.js"],"sourcesContent":["const CONFIG = {\r\n  BASE_URL: \"https://restaurant-api.dicoding.dev\",\r\n  DATABASE_NAME: \"project-restaurant\",\r\n  DATABASE_VERSION: 1,\r\n  OBJECT_STORE_NAME: \"restaurant\",\r\n  CACHE_NAME: \"restaurant\",\r\n};\r\n\r\nexport default CONFIG;\r\n","import CONFIG from \"../global/config\";\r\n\r\nconst cacheHelper = {\r\n  async openCache() {\r\n    return caches.open(CONFIG.CACHE_NAME);\r\n  },\r\n  async cachingApplicationShell(request) {\r\n    const cache = await this.openCache();\r\n    cache.addAll(request);\r\n  },\r\n  async deleteOldCache() {\r\n    const cacheNames = await caches.keys();\r\n    // eslint-disable-next-line max-len\r\n    cacheNames.filter((name) => name !== CONFIG.CACHE_NAME).map((filteredName) => caches.delete(filteredName));\r\n  },\r\n  async fetchRequest(request) {\r\n    const response = await fetch(request);\r\n\r\n    if (!response || response.status !== 200) {\r\n      return response;\r\n    }\r\n\r\n    await this.addNewCache(request);\r\n    return response;\r\n  },\r\n  async addNewCache(request) {\r\n    const cache = await this.openCache();\r\n    cache.add(request);\r\n  },\r\n  async revalidateCache(request) {\r\n    const response = await caches.match(request);\r\n\r\n    if (response) {\r\n      this.fetchRequest(request);\r\n      return response;\r\n    }\r\n    return this.fetchRequest(request);\r\n  },\r\n};\r\n\r\nexport default cacheHelper;\r\n","import cacheHelper from \"./utils/cacheHelper\";\r\n\r\nconst assetsToCache = [\"./\", \"./index.html\", \"./app.webmanifest\", \"./images/logo/logo.png\"];\r\n\r\n// eslint-disable-next-line no-restricted-globals\r\nself.addEventListener(\"install\", (e) => {\r\n  e.waitUntil(cacheHelper.cachingApplicationShell([...assetsToCache]));\r\n});\r\n// eslint-disable-next-line no-restricted-globals\r\nself.addEventListener(\"activate\", (e) => {\r\n  e.waitUntil(cacheHelper.deleteOldCache());\r\n});\r\n// eslint-disable-next-line no-restricted-globals\r\nself.addEventListener(\"fetch\", (e) => {\r\n  e.respondWith(cacheHelper.revalidateCache(e.request));\r\n});\r\n"],"names":["openCache","caches","open","CONFIG","cachingApplicationShell","request","addAll","deleteOldCache","keys","filter","name","map","filteredName","fetchRequest","fetch","response","status","addNewCache","add","revalidateCache","match","assetsToCache","self","addEventListener","e","waitUntil","cacheHelper","respondWith"],"sourceRoot":""}